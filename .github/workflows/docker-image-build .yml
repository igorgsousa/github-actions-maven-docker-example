name: DockerImageBuild

on: 
  workflow_dispatch:
    
jobs:
  buildArtifact:
    runs-on: ubuntu-latest  

    steps:
      - uses: actions/checkout@v2

      - name: Get version and name
        run: |
          versionVar=$(mvn help:evaluate -Dexpression='project.version' -q -DforceStdout --file ./maven-github-action/pom.xml )
          echo "::set-env name=artifactVersion::$versionVar"        
          artifactIdVar=$(mvn help:evaluate -Dexpression='project.artifactId' -q -DforceStdout --file ./maven-github-action/pom.xml )
          echo "::set-env name=artifactId::$artifactIdVar"

      - name: Show version and artifact id
        run:  echo $artifactId  $artifactVersion      

      - name: Set up JDK 1.8
      
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Build with Maven
        run: mvn -B package --file ./maven-github-action/pom.xml  

      - name: Save version
        run: echo $artifactVersion > versions

      - uses: actions/upload-artifact@v2
        with:
          name: versions 
          path: versions  

      - uses: actions/upload-artifact@v2
        with:
          name: maven-github-action-${{ env.artifactVersion }} 
          path: ./maven-github-action/target/app.jar     

  buildDokerImage:
    runs-on: ubuntu-latest

    needs: [buildArtifact]

    steps:

      - name: Download latest build
        uses: actions/download-artifact@v2
        with:
          name: versions  
      
      - name: Set version
        run: |
          artifactIdVar=$(<versions)
          echo "::set-env name=artifactId::$artifactIdVar"

      - name: Download latest build
        uses: actions/download-artifact@v2
        with:
          name: maven-github-action-${{ env.artifactId }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: maven-github-action
          IMAGE_TAG: ${{ env.artifactVersion }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


              
          
        
